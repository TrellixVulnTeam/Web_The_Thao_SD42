<title>Giỏ hàng</title>

<style>
    a:hover{
        text-decoration: none;
    }
 a:hover i{
    color:rgb(122, 121, 121);
}
    th, td {
  padding: 5px 15px;

}
th{
    color: #8a8787;
    font-weight: 400;
}
tr, table{
    width: 100%;
}
td p{
    padding: 5px;
      display: inline-block;
}
.cartsum{
    border: none;
    text-align: end;
    padding-right: 5px;
    width: 80%;
    font-weight: 500;
}
input{
    width: 100%;
}
.disactive-cart{
    display:none !important
}
</style>

{{!-- Nếu giỏ hàng không có sp thì sẽ hiển thị như này --}}
<div id="none-cart" class="container text-center disactive-cart" style="padding-top: 220px;">
    <h5 style="margin-bottom: 20px; color:rgb(122, 121, 121)">Chưa có sản phẩm nào trong giỏ hàng</h5>
    <p style="background-color: #ff9933; display: inline-block; padding: 5px 15px"><a href="/" style="color: white; font-weight: bolder" >QUAY TRỞ LẠI CỬA HÀNG</a></p>
</div>


{{!-- Nếu có sản phẩm sẽ hiện thị như này --}}
<div id="has-cart" class="container d-flex justify-content-between disactive-cart" style="padding-top: 150px; min-height: 400px;">
    <div class="product" style="width: 62%;">
        <table id="list-cart" class="mt-2">
            <tr style="border-bottom: 2px solid #bbbbbb; padding: 5px; font-weight: bolder;">
                <th style="width:300px ;color:#6d6b6b; font-weight: 500;">SẢN PHẨM</th>
                <th style="color:#6d6b6b; font-weight: 500;">GIÁ</th>
                <th style="color:#6d6b6b; font-weight: 500;">SỐ LƯỢNG</th>
                <th style="color:#6d6b6b; font-weight: 500;">THÀNH TIỀN</th>
            </tr>

            {{!-- Một sản phẩm --}}
            
          {{!-- Hết một sản phẩm --}}
        </table>
        <div class="mt-3 d-flex justify-content-between">
            <a href=""><p style="margin-top:20px; border:2px solid #ff9933;text-align:center; padding: 5px 15px ; color: #ff9933;">TIẾP TỤC XEM SẢN PHẨM</p></a>
            <a href=""><p style="margin-top:20px; background-color: #ff9933; border:2px solid #ff9933;text-align:center; padding: 5px 15px; color: white;">CẬP NHẬT GIỎ HÀNG</p></a>
        </div>
     
    </div>
    <div class="cart" style="width:35%">
        <p style="border-bottom: 2px solid #bbbbbb; padding: 5px; font-weight: bolder; color:#6d6b6b">CỘNG GIỎ HÀNG</p>
         <form action="" method="POST">
        <table id="thanhtien">
            
            
        </table>
        <a href="/cart/thanhtoan" style="width: 100%; "><p style="margin-top:20px; background-color: #ff9933;text-align:center; padding: 5px; color: white;">TIẾN HÀNH THANH TOÁN</p></a>
        </form>

        <div>
            <p style="border-bottom: 2px solid #bbbbbb; padding: 5px; font-weight: bolder; color:#6d6b6b"><i class="fas fa-tags"></i> Mã khuyến mãi</p>
            <input type="text" placeholder="Mã khuyến mãi" style="border: #bbbbbb 1px solid; width:100%; margin-top:10px; color:#6d6b6b; padding: 5px">
            <button style="border: #bbbbbb 1px solid; width:100%; margin-top:10px; color:#6d6b6b; padding: 5px">Áp dụng</button>
        </div>
    </div>
</div>


<script>
    //fetch('http://localhost:3000/data')
    //.then(response => response.json())
    //.then(json => json.forEach(x => console.log(x)))

    function autocomplete(inp, arr) {
        
        var currentFocus;
        
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
                
            }
            console.log(inp)
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    //let dataUsers = [
    //{title: "abc"}, {title: "adb"}, {title: "bcs"}]
    
    let cartProducts = [];

         axios.get('http://localhost:3000/api/products')
        .then(function (response){
            var data = [];
            
            response.data.forEach(
                (x,i) => {
                    data[i] = x
                    //console.log(x)
                    }
            )
            cartProducts = data
            
            //console.log(cartProducts)

            let cloneCartProducts = [];

        for(let i = 0; i < localCart.length; i++)
        {
            
            for(let j = 0; j < cartProducts.length; j++)
            {
                
                if(localCart[i] == cartProducts[j]._id)
                    cloneCartProducts[i] = cartProducts[j]
            }
        }
        

        let noneCart = document.getElementById("none-cart");
        let hasCart = document.getElementById("has-cart");
        
        if(typeof localCart === "object" && localCart.length == 0)
        {
            
           noneCart.classList.remove("disactive-cart");
          
        }
        else
        {
            hasCart.classList.remove("disactive-cart");
            let htmlData = '';
            let index = 0;
            cloneCartProducts.forEach(elm => {
                htmlData += `
                <tr style="border-bottom: 0.5px solid #d4d2d2;">
                <td class="d-flex align-items-center">
                    <p onclick="deleteCart(${index})"><a href=""><i class="far fa-times-circle" style="color: #ff9933;"></i></a></p>
                    <p><img src="/${elm.anh_sanpham}" 
                    alt="Hình sp" style="width: 75px; height:75px"></p>
                    <p>${elm.ten_sanpham}</p>
                </td>
                <td style="font-weight: 500;">${elm.gia} <span>VNĐ</span></td>
                <td class="=d-flex" >
                    <div style="border: 1px solid #bbbbbb; width: 100px; ">
                        <button id="sum${index}" style="width: 30%; margin:0; border: none; background-color: rgba(0,0,0,0);" onclick="descreaseCount(${elm._id}, ${elm.gia})">-</button>
                        <input type="text" id="countProduct${index}" value="${localCountProduct[index]}" style="width:30%;margin:0; border: none; text-align: center;" disabled>
                        <button id="sub${index}" style="width: 30%; margin:0; border: none; background-color: rgba(0,0,0,0);" onclick="increaseCount(${elm._id}, ${elm.gia})">+</button>
                    </div>                   
                </td>
                <td id="gia${index}" style="font-weight: 500;">${elm.gia * localCountProduct[index]} <span>VNĐ</span></td>
            </tr>
            `;
            index++;
            })

            $('#list-cart').append(htmlData);
            
            let totalPrice = 0;
            for(let i = 0; i < localCountProduct.length; i++)
            {
                totalPrice += cloneCartProducts[i].gia * localCountProduct[i];
            }
            let htmlThanhTien = `
            <tr style="border-bottom: 1px solid #bbbbbb; padding: 5px">
                <th>Tạm tính</th>
                <td ><input type="text" name="tamtinh" readonly="readonly" value="${totalPrice}" class="cartsum">VNĐ</td>
            </tr>
            <tr style="border-bottom: 1px solid #bbbbbb; padding: 5px">
                <th>Tổng (Thuế 10%)</th>
                 <td><input type="text" name="tong" readonly="readonly" value="${Math.round(totalPrice * 1.1,0)}" class="cartsum">VNĐ</td>
            </tr>
            `;
            $('#thanhtien').append(htmlThanhTien)
            



            

        }
        })
        .catch(function (error) {
            console.log(error);
        })  

    function increaseCount(idProduct, price)
    {
        let getIdProduct = Number(idProduct);
		//Tìm chỉ mục của sản phẩm nếu nó đã có trong giỏ hàng
		let index = localCart.indexOf(getIdProduct);
        localCountProduct[index]++;
		localStorage.setItem('idProduct', JSON.stringify(localCart));
		localStorage.setItem('countProduct', JSON.stringify(localCountProduct));

        let valueCount = document.getElementById("countProduct" + index);
        valueCount.value++;

        $('#gia'+index).empty();
        let newPrice = `
            ${price * localCountProduct[index]} VNĐ
        `;
        
        $('#gia'+index).append(newPrice);
        
        $('#countCart').empty();
        let countCart = 0;
		for(let i = 0; i < localCart.length; i++)
			countCart += localCountProduct[i];
        $('#countCart').append(countCart);
    }
    function descreaseCount(idProduct, price)
    {
        let getIdProduct = Number(idProduct);
		//Tìm chỉ mục của sản phẩm nếu nó đã có trong giỏ hàng
		let index = localCart.indexOf(getIdProduct);
        localCountProduct[index]--;
		localStorage.setItem('idProduct', JSON.stringify(localCart));
		localStorage.setItem('countProduct', JSON.stringify(localCountProduct));

        let valueCount = document.getElementById("countProduct" + index);
        valueCount.value--;
        
         $('#gia'+index).empty();
        let newPrice = `
            ${price * localCountProduct[index]} VNĐ
        `;
        console.log(newPrice);
        $('#gia'+index).append(newPrice);

        $('#countCart').empty();
        let countCart = 0;
		for(let i = 0; i < localCart.length; i++)
			countCart += localCountProduct[i];
        $('#countCart').append(countCart);
    }
    function deleteCart(index)
    {
        index = Number(index);

        localCart.splice(index, 1);
		localCountProduct.splice(index, 1);

        localStorage.setItem('idProduct', JSON.stringify(localCart));
		localStorage.setItem('countProduct', JSON.stringify(localCountProduct));
    }
        
    
</script>