<style>
	input:focus, button:focus{
		outline:none;
	}
	.container-autocomplete{ 
    background-color: white;
    padding:5px 10px;
    border-bottom: 1px solid #b6b6b6;
	position: relative;
	z-index: 99;
	}
</style>
<div id="navbar" style="position: relative; left: -15px;">
<div class="dn d-flex flex-column" style="margin-left: 0.95rem !important">
	<div class="container d-flex justify-content-between">
	      <div class="user">  <!--Box chức năng đăng ký / đăng nhập  -->
	      	<ul>
	      		<li>
	      			{{#if authUser.userName}}
	      			<a href="khach-hang.html"><i class="fas fa-user"></i></a>
                      <a href="/user/editUser"> Chào {{authUser.userName}}</a>
	      			
                      <a href="/logout"> / Đăng xuất</a>
	      			{{else}}
                      <a href="/login">Đăng nhập</a> /
                      <a href="/register">Đăng ký</a>
                      {{/if}}
                      </a> </li>
	      	</ul>
	      </div>
	      <div class="search" style="width:50%">
	      	<form method="GET" action="/search">
	      		<div class="search-box" style="position: relative;">
	      			<input name="ten_sp" id="searchProducts" autocomplete="off"  style="border:0px;  text-align:left; line-height:30px; width: 100%; padding: 2px 15px; font-size:13px;" type="text" placeholder="Nhập từ khóa tìm kiếm" />
	      			
	      			<button class="search_btn" type="submit" style="color: white;height: 25px; width: 50px; font-size:13px; position:absolute; top: 2px; right: 4px; background-color: #FF9933;"><i class="fas fa-search"></i></button>
	      			
	      		</div> 
	      		<input type="hidden" name="controller" value="search">
	      	</form>
	      	
	      </div>
	      <div class="cart d-flex">  <!-- box giỏ hàng  -->
	      	<a href="/cart" class="d-flex">
	      		<div id="shopping-cart" style="background-color: #FF9933;">
	      			<i title="Click để xem giở hàng" class="fas fa-shopping-cart"></i>
					  
	      		</div>
	      		<div id="thongbao">
	      			<span style="text-align:center; line-height:30px; color:#FFF; margin-left:10px;" class="tb">Có 
	      				<strong style="color:#006633" id="countCart">	
	      			</strong> sản phẩm</span>
	      		</div>
	      	</a>
	      </div> 
	</div>

	<div class="menu_top" style=" background-color:rgb(255, 255, 255); margin: 0 auto;">
        <div class="container"> 
             <div class="anh_logo mt-1 column-3"><a href="/"><img src="../images/images_html/Capture.png" style="height:50px; border-bottom-left-radius: 5px;"></a></div>
             
             <ul class="d-flex" style="position: relative;right:-150px" >
                 <li><a style="color: #FF9933;line-height:50px;text-align: end; margin-left: 50px" href="/">Trang Chủ</a></li>
                 <li><a style="color: #FF9933;line-height:50px;text-align: end; margin-left: 50px" href="/products">Sản Phẩm</a></li>
                 <li><a style="color: #FF9933;line-height:50px;text-align: end; margin-left: 50px" href="/blog">Blog</a></li>
                 <li><a style="color: #FF9933;line-height:50px;text-align: end; margin-left: 50px" href="/contact">Liên Hệ</a></li>
                 {{!-- <li><a style="color: #FF9933;line-height:50px;" href="/contact"></a></li>
                 <li><a style="color: #FF9933;line-height:50px;" href="ban-do.html">Bản Đồ</a></li>
                 <li><a style="color: #FF9933;line-height:50px;" href="huong-dan-mua-hang.html">Mua Hàng</a></li> --}}
             </ul>
	         	<script type="text/javascript">
	         	    $(document).ready(function(){
	         	        $(".zoom1").cycle({ 
	         	            fx:    'box', 
	         	            sync:  false, 
	         	            delay: -2000 
	         	        });
	         	    });
	         	</script>
	    </div>
</div>
	
</div>

<!--menu-->
	<!-- Nút lên đầu trang-->
	<script>
		$("a[href='#top']").click(function() {
 	 	$("html, body").animate({ scrollTop: 0 }, "slow");
 	 	return false;
		});
	</script>
	<a class="btn-top" href="#top" title="Top"><i class="fas fa-angle-up" style="font-size:50px; color:#FF9933"></i></a>
<!-- Menu Top Sản phẩm -->

</div>


<script>

    function autocomplete(inp, arr) {
        
        var currentFocus;
        
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    b.classList.add('container-autocomplete')
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
                
            }
            console.log(inp)
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    //let dataUsers = [
    //{title: "abc"}, {title: "adb"}, {title: "bcs"}]
    
    let products = [];

         axios.get('http://localhost:3000/api/products')
        .then(function (response){
            var data = [];
            
            response.data.forEach(
                (x,i) => {
                    data[i] = x
                    //console.log(x)
                    }
            )
            products = data
            
            autocomplete(document.getElementById("searchProducts"), products.map(x => x.ten_sanpham));
        })
        .catch(function (error) {
            console.log(error);
        })  


    
</script>
